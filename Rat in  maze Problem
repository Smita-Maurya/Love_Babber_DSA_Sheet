class Solution{
    public:
    
    bool issafe(int i , int j ,vector<vector<int>> &m, int n , vector<vector<int>>vis ){
        if(i>=0 && i<n && j>=0 && j<n && vis[i][j]==0 && m[i][j]==1){
            return true;
        }
        return false;
    }
    
    
    void solve(int i , int j ,vector<vector<int>> &m, int n , vector<vector<int>>vis , vector<string>&ans , string path ){
        if(i==n-1 && j==n-1){
            ans.push_back(path);
            return ;
        }
        vis[i][j]=1;
         int ni= i+1 ;
         int nj=j;
         if(issafe(ni , nj , m , n , vis)){
             path.push_back('D');
             solve(ni , nj , m , n , vis , ans , path);
             path.pop_back();
         }
          ni= i-1 ;
          nj=j;
         if(issafe(ni , nj , m , n , vis)){
             path.push_back('U');
             solve(ni , nj , m , n , vis , ans , path);
             path.pop_back();
         }
          ni= i ;
          nj=j-1;
         if(issafe(ni , nj , m , n , vis)){
             path.push_back('L');
             solve(ni , nj , m , n , vis , ans , path);
             path.pop_back();
         }
          ni= i ;
          nj=j+1;
         if(issafe(ni , nj , m , n , vis)){
             path.push_back('R');
             solve(ni , nj , m , n , vis , ans , path);
             path.pop_back();
         }
         vis[i][j]=0;
    }
    vector<string> findPath(vector<vector<int>> &m, int n) {
       
        vector<string>ans;
        if(m[0][0]==0){
            return ans;
        }
        vector<vector<int>>vis(n , vector<int>(n ,0));
        int si=0;
        int sj=0;
        string path="";
        solve(si , sj , m ,n ,vis , ans , path);
        
        sort(ans.begin() , ans.end());
        return ans;
    }
};

    
