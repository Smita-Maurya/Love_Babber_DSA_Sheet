class Solution{
  public:
    // arr[]: Input Array
    // N : Size of the Array arr[]
    // Function to count inversions in the array.
    long long int merge(long long arr[], long long temp[] , int left , int right , int mid){
        int i=left;
        int j=mid;
        int k=left;
        long long int count=0;
        while(i<=mid-1 && j<=right){
            if(arr[i] <=arr[j]){
                temp[k++]= arr[i++];
            }
            else{
                temp[k++]=arr[j++];
                count+=(mid-i);
            }
        }
        
        while(i<=mid-1){
            temp[k++]= arr[i++]; 
        }
        while(j<=right){
             temp[k++]= arr[j++];
        }
        
        for(int i=left ; i<=right ; i++){
            arr[i]=temp[i];
        }
        return count;
    }
    
    long long int mergesort(long long arr[], long long temp[] , int left , int right){
      long long  int count=0;
        if(left<right){
            int mid= (right+left)/2;
            count+=mergesort(arr , temp , left , mid);
            count+=mergesort(arr , temp , mid+1 , right);
            
            count+= merge(arr , temp , left , right , mid+1);
        }
        
        return count;
    }
    long long int inversionCount(long long arr[], long long N)
    {
        long long temp[N];
        return mergesort(arr , temp , 0 , N-1);
    }

};
