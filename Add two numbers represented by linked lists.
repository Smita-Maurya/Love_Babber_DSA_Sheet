class Solution
{
    public:
    Node* reverse(Node*head){
        if(head==NULL){
            return NULL;
        }
        Node*prev=NULL;
        Node* curr=head;
        Node* next;
        while(curr!=NULL){
            next=curr->next;
            curr->next=prev;
            prev=curr;
            curr=next;
        }
        
        return prev;
    }
    //Function to add two numbers represented by linked list.
    struct Node* addTwoLists(struct Node* first, struct Node* second)
    {
        if(first==NULL && second==NULL){
            return NULL;
        }
        if(first==NULL){
            return second;
        }
        if(second==NULL){
            return first;
        }
        first= reverse(first);
        second= reverse(second);
        struct Node*temp=first;
        struct Node*temp2=second;
        struct Node*head=new struct Node(0);
        struct Node*tail=head;
        int carry=0;
        while(temp!=NULL || temp2!=NULL || carry>0){
            int sum= 0;//temp->data+temp2->data+carry;
            if(temp!=NULL){
                sum+=temp->data;
                temp=temp->next;
            }
            
            if(temp2!=NULL){
                sum+=temp2->data;
                temp2=temp2->next;
            }
            sum+=carry;
            int mod=sum%10;
             carry=sum/10;
             struct Node*newnode= new struct Node(mod);
             tail->next=newnode;
             tail=tail->next;
        }
        
        
        Node* res= head->next;
        delete(head);
        Node*ans=reverse(res);
        return ans;
        
        
       
    }
};
