class Solution 
{
    public:
    
    bool isempty(int grid[N][N] , int row , int col){
        for(int i=0; i<N ; i++){
            for(int j=0; j<N ; j++){
                if(grid[i][j]==0){
                    row=i;
                    col=j;
                    return true;
                }
            }
        }
        return false;
    }
    bool checkrow(int grid[N][N] , int row , int num){
        for(int i=0; i<N ; i++){
            if(grid[row][i]==num){
                return false;
            }
        }
        return true;
    }
    bool checkcol(int grid[N][N] , int col , int num){
        for(int i=0; i<N ; i++){
            if(grid[i][col]==num){
                return false;
            }
        }
        return true;
    }
    bool checkdia(int grid[N][N] , int row ,int col, int num){
        int rowf= row-(row%3);
        int colf= col-(col%3);
        
        for(int i=0; i<3 ; i++){
            for(int j=0; j<3 ; j++){
            if(grid[i+rowf][j+colf]==num){
                return false;
            }
            }
        }
        return true;
    }
    
    bool issafe(int grid[N][N] , int row ,int col, int num){
        
        if(checkrow(grid , row , num)&&checkcol(grid , col , num)&&checkdia(grid , row ,col, num)){
            return true;
        }
        return false;
    }
    //Function to find a solved Sudoku. 
    bool SolveSudoku(int grid[N][N])  
    { 
        int row;
        int col;
        if(!isempty(grid , row , col)){
            return true;
        }
        for(int i=0; i<N ; i++){
            for(int j=0; j<N ; j++){
                if(grid[i][j]==0){
                  for(int n=1; n<=9 ; n++){
                     if(issafe(grid ,i , j , n)){
                      grid[i][j]=n;
                      if(SolveSudoku( grid)){
                       return true;
                    }
                    else{
                       grid[i][j]=0; 
                    }
                }
            
           
        }  
        return false; 
                }
            }
        }
        
        return true;
        // Your code here
    }
    
    //Function to print grids of the Sudoku.
    void printGrid (int grid[N][N]) 
    {
        if(SolveSudoku(grid)){
        for(int i=0; i<N ; i++){
            for(int j=0; j<N ; j++){
                cout<<grid[i][j]<<" ";
            }
            
        }
        }
       
    }
};
